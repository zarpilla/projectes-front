server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    # Handle service worker specifically for /stats/ prefix - must come before other /stats/ rules
    location = /stats/service-worker.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        try_files /service-worker.js =404;
    }
    
    # Service worker should never be cached - handle direct access
    location = /service-worker.js {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }

    # Handle static assets with /stats/ prefix - strip the prefix (but exclude service-worker.js)
    location ~* ^/stats/(.+\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot))$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        try_files /$1 =404;
    }

    # Force no caching for HTML files - this is critical for service worker updates
    location ~* \.html$ {
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Last-Modified $date_gmt;
        add_header ETag "";
        if_modified_since off;
        # Add a unique query parameter to force cache busting
        add_header X-Cache-Bust $msec;
    }

    # Handle /stats/ app routes - serve index.html for SPA routing
    location /stats/ {
        try_files $uri $uri/ /index.html;
    }

    # Handle other static files (manifest, favicon, etc.) with /stats/ prefix
    location ~* ^/stats/(.+)$ {
        try_files /$1 /index.html;
    }

    # Redirect root to /stats/
    location = / {
        return 301 /stats/;
    }

    # Fallback for any other requests
    location / {
        try_files $uri $uri/ /index.html;
    }
}
